---
title:  "access control" 

categories:
  - 접근통제
tags:
  - [AC]

toc: true

date: 2022-10-21
last_modified_at: 2022-10-21
---

## 접근 통제 모델

- 접근 통제(Access Control)

  - 어떤 주체(사용자, 프로그램, 프로세스)가 어느 객체(파일, 디바이스, 저장장치, 프린터, 메모리, CPU 등)에접근하는 것을 통제하는 방법

  - 인프라 측면에서 가용성에 어느 정도 영향을 미치지만, 기밀성과 무결성 확보가 주목적

  - 접근 제어 모델

    > 임의적 접근 통제(DAC, Discretionary Access Control)

    > 강제적 접근 통제(MAC, Mandatory Access Control)

    > 역할 기반 접근 제어(Role-Based Access Control)

- 임의적 접근 통제(DAC, Discretionary Access Control)

  - 접근하는 주체의 신분에 따라 접근 권한 부여

  - 정보의 소유자가 정보의 보안 레벨을 결정하고 이에 대한 정보의 접근 제어도 설정하는 모델

  - 대표적으로 유닉스나 윈도우에서 파일에 대한 접근 제어를 설정(파일을 보여주고 싶은 사람에게만 보여주 는 것)

  - 편리한 접근 제어 모델이나 파일의 소유자, 즉 정보의 소유자가 정보의 보안 레벨과 접근 제어를 설정하기 때문에 중앙 집중적인 정보 관리가 어려워 정보에 대한 엄격한 접근 제어가 사실상 거의 불가능

  - 신분 기반 접근 통제 정책

    > 개인 기반 접근 정책(IBP, Individual-Based Policy)

    > 그룹 기반 접근 정책(GBP, Group-Based Policy) 

  - 장점 

    > 구현이 쉽고 변경이 유연

  -  단점 

    > 트로이 목마 등의 공격에 취약 

    > 주체에 전적으로 의존하므로 이에 따른 문제가 발생 

    > 주체마다 객체에 대한 접근 권한을 부여해야 하는 불편함 발생 

    > 중앙 집중 방식이 아니라 시스템 전체적 보안 관리가 MAC보다 약함

## 실습

- 퍼미션 종류

  |          |  r   |   w   |    x     |
  | :------: | :--: | :---: | :------: |
  | 디렉터리 |  ls  | touch |    cd    |
  |   파일   | cat  | cat > | ./파일명 |

- ktest 로 설정 test01,test02 로 확인

  ```
  [ktest@localhost ~]$ mkdir /dactest
  ```

  ![화면 캡처 2022-10-21 201510](../../assets/img/화면 캡처 2022-10-21 201510.png)

  - 디렉터리 생성후 소유권(소유자:소유그룹) ktest 로 변경

    ```
    [root@localhost 바탕화면]# mkdir /dactest
    [root@localhost 바탕화면]# chown ktest:ktest /dactest
    ```

    ![화면 캡처 2022-10-21 201736](../../assets/img/화면 캡처 2022-10-21 201736.png)

    > ktest가 디렉터리의 소유자

  - test01 사용자에게 소유권을 넘겨주면서 퍼미션을 읽기만 가능 하게 할수 있는지 확인

    ```
    [root@localhost 바탕화면]# chown test01:test01 /dactest/test01_file 
    [root@localhost 바탕화면]# chown test02:test01 /dactest/test02_file
    [ktest@localhost dactest]$ chmod 444 /dactest/test01_file
    ```

    ![화면 캡처 2022-10-21 204507](../../assets/img/화면 캡처 2022-10-21 204507.png)

    ```
    [ktest@localhost dactest]$ touch /dactest/test03_file
    [ktest@localhost dactest]$ chmod 444 /dactest/test03_file
    [ktest@localhost dactest]$ ls -al /dactest/test03_file
    ```

    ![화면 캡처 2022-10-21 204608](../../assets/img/화면 캡처 2022-10-21 204608.png)

- 공유폴더를 이용한 신분기반 접근 제어 정책 테스트

  - 2003

    ```
    폴더 생성후 공유 > everyone,읽기,변경
    ```

    ![화면 캡처 2022-10-21 205216](../../assets/img/화면 캡처 2022-10-21 205216.png)

    ![화면 캡처 2022-10-21 205049](../../assets/img/화면 캡처 2022-10-21 205049.png)

    ```
    lusrmgr.msc 
    
    로컬 사용자 및 그룹 
    사용자 > dac01,dac02 사용자추가 > 비밀번호 설정
    그룹 > dacgroup 추가
    ```

    ![화면 캡처 2022-10-21 203433](../../assets/img/화면 캡처 2022-10-21 203433.png)

    ```
    개인 기반 접근 정책(IBP, Individual-Based Policy)
    
    c:\dactest_user > 속성 > 공유 > 사용권한 > everyone 제거  
    - dac01 , 읽기 , 변경
    - dac02 , 읽기
    ```

    ![화면 캡처 2022-10-21 205846](../../assets/img/화면 캡처 2022-10-21 205846.png)

    ![화면 캡처 2022-10-21 205859](../../assets/img/화면 캡처 2022-10-21 205859.png)

  - xp

    ```
    lusrmgr.msc 사용자 생성 > dac01/P@ssw0rd, dac02/P@ssw0rd
    ```

    ![화면 캡처 2022-10-21 210210](../../assets/img/화면 캡처 2022-10-21 210210.png)

    ```
    dac01 -> 2003으로 접속하여 테스트
    ```

    ![화면 캡처 2022-10-21 211016](../../assets/img/화면 캡처 2022-10-21 211016.png)

    ![화면 캡처 2022-10-21 211110](../../assets/img/화면 캡처 2022-10-21 211110.png)

    ![화면 캡처 2022-10-21 210558](../../assets/img/화면 캡처 2022-10-21 210558.png)

    > 파일 및 폴더 생성 가능

    ```
    dac02 -> 2003으로 접속하여 테스트
    ```

    ![화면 캡처 2022-10-21 211246](../../assets/img/화면 캡처 2022-10-21 211246.png)

    ![화면 캡처 2022-10-21 211315](../../assets/img/화면 캡처 2022-10-21 211315.png)

    > 생성은 불가능 하고 읽기만 가능하다

- 그룹 기반 접근 정책(GBP, Group-Based Policy)

  - 2003

    ```
    c:\dactest_group > 속성 > dacgroup , 읽기 , 변경
    dacgroup : 구성원 dac01 추가 
    ```

    

  - 

## RBAC

- RBAC(Role-Based Access Control)
  - 주체와 객체 사이에 역할을 부여해 다른 접근 통제의 약점을 보완(MAC- DAC의 대안으로 등장) 

  - 회사에서 근 무시 직책이 변경되고 직책에 따라 업무에 대한 권한도 변경 됨

  - 직책이 변경되면 가졌던 권한 중 불필요한 권한이 모두 삭제되고 변경되어야 하나, 일반적으로 그렇지 않고 대부분 새로운 업무 수행에 필요한 권한만 추가로 부여되는 사례가 많음

  - 직책을 변경하다 보면 불필요한 권한을 많이 가지게 되고 권한이 확대되는데, 이를 Authorization Creep이라고 함

  - 중앙 관리자가 주체와 객체의 상호 관계를 통제

  - 조직 내에서 맡은 역할에 기초하여 자원에 대한 접근 허용 여부를 결정

    > 직책에 대한 권한 세트를 미리 구성 → 새로운 사람이 올 경우 직책에 의해 권한 할당

    > 직책이 변경 될 경우 기존 권한을 제거하고 해당하는 직책에 대한 권한 부여